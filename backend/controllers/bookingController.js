import Booking from '../models/Booking.js';
import Tour from '../models/Tour.js';

// ‚úÖ T·∫°o booking c√≥ ki·ªÉm tra ch·ªó v√† th·ªùi gian (an to√†n) v√† th√™m ƒë·ªãa ch·ªâ
export const createBooking = async (req, res) => {
  try {
    const {
      tourId,
      guestSize,
      fullName,
      phone,
      tourName,
      totalAmount,
      paymentMethod,
      bookAt,
      // Th√™m ƒë·ªãa ch·ªâ
      province,
      district,
      ward,
      addressDetail,
    } = req.body;

    // ‚õî Ki·ªÉm tra s·ªë l∆∞·ª£ng kh√°ch h·ª£p l·ªá
    if (!guestSize || guestSize <= 0) {
      return res.status(400).json({
        success: false,
        message: "S·ªë l∆∞·ª£ng kh√°ch ph·∫£i l·ªõn h∆°n 0."
      });
    }

    // ‚õî Ki·ªÉm tra ƒë·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß
    if (
      !province || !province.code || !province.name ||
      !district || !district.code || !district.name ||
      !ward || !ward.code || !ward.name ||
      !addressDetail || addressDetail.trim() === ""
    ) {
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªãa ch·ªâ (t·ªânh, huy·ªán, x√£, chi ti·∫øt)."
      });
    }

    // üîç T√¨m tour theo ID
    const tour = await Tour.findById(tourId);
    if (!tour) {
      return res.status(404).json({
        success: false,
        message: "Tour kh√¥ng t·ªìn t·∫°i."
      });
    }

    // ‚õî Ki·ªÉm tra tour ƒë√£ k·∫øt th√∫c ch∆∞a
    const today = new Date();
    if (today > new Date(tour.endDate)) {
      return res.status(400).json({
        success: false,
        message: "Tour n√†y ƒë√£ k·∫øt th√∫c v√† kh√¥ng c√≤n kh·∫£ d·ª•ng."
      });
    }

    // ‚úÖ Ki·ªÉm tra s·ªë ch·ªó c√≤n l·∫°i
    const remaining = tour.maxGroupSize - tour.currentBookings;
    if (guestSize > remaining) {
      return res.status(400).json({
        success: false,
        message: `Ch·ªâ c√≤n l·∫°i ${remaining} ch·ªó tr·ªëng.`
      });
    }

    // ‚úÖ TƒÉng s·ªë ng∆∞·ªùi ƒë√£ ƒë·∫∑t v√† l∆∞u tour
    tour.currentBookings += guestSize;
    await tour.save();

    // ‚úÖ T·∫°o booking v·ªõi ƒë·ªãa ch·ªâ
    const newBooking = new Booking({
      userId: req.user.id,
      userEmail: req.user.email,
      tourId,
      tourName,
      fullName,
      phone,
      guestSize,
      totalAmount,
      paymentMethod,
      bookAt,
      province,
      district,
      ward,
      addressDetail,
    });

    const savedBooking = await newBooking.save();

    res.status(200).json({
      success: true,
      message: "ƒê·∫∑t tour th√†nh c√¥ng!",
      data: savedBooking
    });
  } catch (error) {
    console.error("‚ùå L·ªói t·∫°o booking:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói khi t·∫°o booking",
      error: error.message
    });
  }
};

// ‚úÖ L·∫•y 1 booking theo ID
export const getBooking = async (req, res) => {
  try {
    const id = req.params.id;
    const booking = await Booking.findById(id);

    if (!booking) {
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y booking"
      });
    }

    res.status(200).json({
      success: true,
      message: "L·∫•y booking th√†nh c√¥ng",
      data: booking
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "L·ªói m√°y ch·ªß n·ªôi b·ªô",
      error: error.message
    });
  }
};

// ‚úÖ L·∫•y t·∫•t c·∫£ booking (admin)
export const getAllBookings = async (req, res) => {
  try {
    const books = await Booking.find().sort({ createdAt: -1 });

    res.status(200).json({
      success: true,
      message: "L·∫•y t·∫•t c·∫£ booking th√†nh c√¥ng",
      data: books
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      message: "Kh√¥ng th·ªÉ l·∫•y danh s√°ch booking",
      error: error.message
    });
  }
};
