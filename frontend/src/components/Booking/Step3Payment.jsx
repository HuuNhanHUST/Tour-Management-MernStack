import React, { useState } from "react";
import { Button, ListGroup, ListGroupItem } from "reactstrap";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { BASE_URL } from "../../utils/config.js";
import NotificationManager from "../shared/NotificationManager";

const Step3Payment = ({ tour, bookingData, updateBookingData, prevStep }) => {
  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState("Cash");
  const [isProcessing, setIsProcessing] = useState(false);
  const navigate = useNavigate();

  const { pricingData, guests, singleRoomCount, fullName, phone, province, district, ward, addressDetail, userId, userEmail } = bookingData;

  // Merge pricing data into guests
  const guestsWithPrices = guests.map((guest, index) => {
    const guestPrice = pricingData?.guestPrices?.[index];
    return {
      fullName: guest.fullName,
      age: guest.age,
      guestType: guest.guestType,
      price: guestPrice?.finalPrice || guestPrice?.basePrice || 0,
      discounts: guestPrice?.discounts || [],
      surcharges: guestPrice?.surcharges || []
    };
  });

  const totalAmount = pricingData?.totalAmount || 0;
  const basePrice = pricingData?.basePrice || Number(tour.price);
  const appliedDiscounts = pricingData?.appliedDiscounts || [];
  const appliedSurcharges = pricingData?.appliedSurcharges || [];

  const handlePayment = async () => {
    if (!selectedPaymentMethod) {
      NotificationManager.error("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n");
      return;
    }

    setIsProcessing(true);

    const paymentData = {
      userId,
      userEmail,
      fullName,
      phone,
      guestSize: guests.length,
      guests: guestsWithPrices,
      singleRoomCount,
      tourId: tour._id,
      tourName: tour.title,
      totalAmount,
      basePrice,
      appliedDiscounts,
      appliedSurcharges,
      province,
      district,
      ward,
      addressDetail,
      bookAt: new Date()
    };

    try {
      if (selectedPaymentMethod === "Cash") {
        const res = await axios.post(
          `${BASE_URL}/payment/cash`,
          paymentData,
          { withCredentials: true }
        );

        if (res.data.success) {
          NotificationManager.success("ƒê·∫∑t tour th√†nh c√¥ng!");
          navigate("/thank-you");
        } else {
          NotificationManager.error(res.data.message || "ƒê·∫∑t tour th·∫•t b·∫°i");
        }
      } else if (selectedPaymentMethod === "MoMo") {
        // ‚úÖ FIX: Remove client-side orderId generation - server will generate it
        const momoPaymentData = {
          ...paymentData,
          amount: totalAmount,
          orderInfo: `Thanh to√°n tour: ${tour.title}`,
          email: userEmail
        };

        const response = await axios.post(
          `${BASE_URL}/payment/momo`,
          momoPaymentData,
          { withCredentials: true }
        );

        if (response.data && response.data.payUrl) {
          window.location.href = response.data.payUrl;
        } else {
          NotificationManager.error("Kh√¥ng th·ªÉ t·∫°o thanh to√°n MoMo: " + (response.data?.message || "Vui l√≤ng th·ª≠ l·∫°i sau."));
        }
      }
    } catch (error) {
      console.error("‚ùå L·ªói thanh to√°n:", error);
      let errorMessage = "Thanh to√°n th·∫•t b·∫°i.";

      if (error.response) {
        errorMessage = `L·ªói: ${error.response.data?.message || error.message}`;
      } else if (error.request) {
        errorMessage = "Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi.";
      }

      NotificationManager.error(errorMessage);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="step-container">
      <div className="booking-section-title border-bottom pb-2 mb-3">
        <h5 className="fw-bold">B∆∞·ªõc 3: Thanh to√°n</h5>
        <small className="text-muted">Xem l·∫°i th√¥ng tin v√† ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</small>
      </div>

      {/* Booking Summary */}
      <div className="booking-section mb-4">
        <div className="booking-section-header">
          <i className="ri-information-line section-icon"></i>
          <h6 className="fw-bold">Th√¥ng tin ƒë·∫∑t tour</h6>
        </div>
        <div className="summary-detail-card border rounded p-3">
          <div className="mb-3">
            <strong>Tour:</strong> {tour.title}
          </div>
          <div className="mb-3">
            <strong>Ng√†y ƒëi:</strong> {new Date(tour.startDate).toLocaleDateString("vi-VN")}
          </div>
          <div className="mb-3">
            <strong>Ng∆∞·ªùi ƒë·∫∑t:</strong> {fullName} - {phone}
          </div>
          <div className="mb-3">
            <strong>ƒê·ªãa ch·ªâ ƒë√≥n:</strong> {addressDetail}, {ward.name}, {district.name}, {province.name}
          </div>
          <div>
            <strong>S·ªë kh√°ch:</strong> {guests.length} ng∆∞·ªùi
            {singleRoomCount > 0 && ` (${singleRoomCount} ph√≤ng ƒë∆°n)`}
          </div>
        </div>
      </div>

      {/* Guest List */}
      <div className="booking-section mb-4">
        <div className="booking-section-header">
          <i className="ri-team-line section-icon"></i>
          <h6 className="fw-bold">Danh s√°ch kh√°ch</h6>
        </div>
        <ListGroup>
          {guestsWithPrices.map((guest, index) => (
            <ListGroupItem key={index} className="d-flex justify-content-between align-items-center">
              <div>
                <strong>{guest.fullName}</strong>
                <br />
                <small className="text-muted">
                  {guest.age} tu·ªïi - {
                    guest.guestType === 'adult' ? 'Ng∆∞·ªùi l·ªõn' :
                    guest.guestType === 'child' ? 'Tr·∫ª em' :
                    guest.guestType === 'infant' ? 'Em b√©' :
                    guest.guestType === 'senior' ? 'Ng∆∞·ªùi cao tu·ªïi' : 'Sinh vi√™n'
                  }
                </small>
              </div>
              <strong className="text-primary">${guest.price.toLocaleString()}</strong>
            </ListGroupItem>
          ))}
        </ListGroup>
      </div>

      {/* Price Breakdown */}
      <div className="booking-section mb-4">
        <div className="booking-section-header">
          <i className="ri-money-dollar-circle-line section-icon"></i>
          <h6 className="fw-bold">Chi ti·∫øt gi√°</h6>
        </div>
        <div className="price-breakdown p-3 border rounded">
          <div className="d-flex justify-content-between mb-2">
            <span>Gi√° c∆° b·∫£n:</span>
            <span>${basePrice.toLocaleString()}</span>
          </div>

          {appliedDiscounts && appliedDiscounts.length > 0 && (
            <>
              <hr />
              <div className="text-success mb-2">
                <strong>Gi·∫£m gi√°:</strong>
              </div>
              {appliedDiscounts.map((discount, idx) => (
                <div key={idx} className="d-flex justify-content-between mb-2 text-success">
                  <small>{discount.name}</small>
                  <small>-${discount.amount.toLocaleString()}</small>
                </div>
              ))}
            </>
          )}

          {appliedSurcharges && appliedSurcharges.length > 0 && (
            <>
              <hr />
              <div className="text-warning mb-2">
                <strong>Ph·ª• thu:</strong>
              </div>
              {appliedSurcharges.map((surcharge, idx) => (
                <div key={idx} className="d-flex justify-content-between mb-2 text-warning">
                  <small>{surcharge.name}</small>
                  <small>+${surcharge.amount.toLocaleString()}</small>
                </div>
              ))}
            </>
          )}

          <hr />
          <div className="d-flex justify-content-between">
            <strong>T·ªïng c·ªông:</strong>
            <strong className="text-primary" style={{ fontSize: '1.5rem' }}>
              ${totalAmount.toLocaleString()}
            </strong>
          </div>
        </div>
      </div>

      {/* Payment Method Selection */}
      <div className="booking-section mb-4">
        <div className="booking-section-header">
          <i className="ri-bank-card-line section-icon"></i>
          <h6 className="fw-bold">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</h6>
        </div>
        <div className="payment-methods">
          <div
            className={`payment-method-card border rounded p-3 mb-3 cursor-pointer ${selectedPaymentMethod === 'Cash' ? 'selected' : ''}`}
            onClick={() => setSelectedPaymentMethod('Cash')}
          >
            <div className="d-flex align-items-center">
              <input
                type="radio"
                name="paymentMethod"
                value="Cash"
                checked={selectedPaymentMethod === 'Cash'}
                onChange={() => setSelectedPaymentMethod('Cash')}
                className="me-3"
              />
              <div>
                <strong>üíµ Thanh to√°n ti·ªÅn m·∫∑t</strong>
                <br />
                <small className="text-muted">Thanh to√°n tr·ª±c ti·∫øp khi nh·∫≠n tour</small>
              </div>
            </div>
          </div>

          <div
            className={`payment-method-card border rounded p-3 cursor-pointer ${selectedPaymentMethod === 'MoMo' ? 'selected' : ''}`}
            onClick={() => setSelectedPaymentMethod('MoMo')}
          >
            <div className="d-flex align-items-center">
              <input
                type="radio"
                name="paymentMethod"
                value="MoMo"
                checked={selectedPaymentMethod === 'MoMo'}
                onChange={() => setSelectedPaymentMethod('MoMo')}
                className="me-3"
              />
              <div>
                <strong>üì± Thanh to√°n qua MoMo</strong>
                <br />
                <small className="text-muted">Thanh to√°n ngay qua v√≠ ƒëi·ªán t·ª≠ MoMo</small>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="d-flex gap-2">
        <Button
          className="btn btn-outline-secondary"
          onClick={prevStep}
          style={{ flex: 1 }}
          disabled={isProcessing}
        >
          ‚Üê Quay l·∫°i
        </Button>
        <Button
          className="btn primary__btn"
          onClick={handlePayment}
          style={{ flex: 2 }}
          disabled={isProcessing}
        >
          {isProcessing ? (
            <>
              <span className="spinner-border spinner-border-sm me-2" role="status"></span>
              ƒêang x·ª≠ l√Ω...
            </>
          ) : selectedPaymentMethod === 'Cash' ? (
            "X√°c nh·∫≠n ƒë·∫∑t tour"
          ) : (
            "Thanh to√°n qua MoMo"
          )}
        </Button>
      </div>
    </div>
  );
};

export default Step3Payment;
